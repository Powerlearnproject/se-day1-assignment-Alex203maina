software engineering - software engineering is the process of designing, developing ,testing and maintaining a software.
    software engineering is used in creation os software applications and systems in various aspects such as helthcare, commerce , technology.
key milestones in the evolution os software engineering
-	The establishment of SE as a discipline in the 1960s
    during this period several programming languages were developed that would change the future of programming example we have FOTRAN,ALGOL and COBOL, the languages helved establish the priciple of structured programming and modular design.
-	The advent of structured programming in the 1970s
    the advent of structured programming emphasized the use of control stuructures like lops and conditional statements.key developments in this period include C, SQL and Smalltaks.
-	The rise of agile methodology in 2000s
    the agile methodology emphasizes interative development, collaboration and rapid response to change . key developments include Ruby, Node.js and swift.
Compare and contrast the Waterfall and Agile methodologies. Provide examples of scenarios where each would be appropriate.
    - waterfall methology is a linear, sequential approach to software development where each phase must be completed before moving to the next where as agile is an iterative and flexible approach to software emphasizing collaboration , customer feedback and continous improvement.
    - waterfall methodology is best suited for projects with well defined and suitable requirements, strict deadline and budgets, low risk of requirment changes.
    - agile methodology is ideal for projets with rapidly changing requirements, high uncertainty , the need for early and frequent feedback and cross-functional teams and stakeholders.
roles and responsibilities of a Software Developer, a Quality Assurance Engineer, and a Project Manager in a software engineering team.
    - Software Developer:
        - Responsible for writing code and implementing software solutions.
        - translates user requiremnts into functional software features.
        - identify and resolves bugs and issues in the codebase impoving performance
    - Quality Assurance Engineer:
        -  Ensures software quality by designing and executing test plans.
        - logs and track defects , working closely with developers to ensure timely resolution of issues.
    - Project Manager: 
        - Oversees the planning, execution, and delivery of software projects.
        - facilitates communication and collaboration among team members , ensuring everyone is aligned with project goals and timelines.
        - quality assurance - ensure that the final products meets quality standarts and aligns with the user requirements before delivery.
importance of Integrated Development Environments (IDEs) and Version Control Systems (VCS) in the software development process. Give examples of each.
    - Integrated Development Environments (IDEs) -
         Software suites that provide comprehensive tools for writing, debugging, and testing code (e.g., Visual Studio, Eclipse, IntelliJ IDEA).
    - Version Control Systems (VCS) :
        Software tools for tracking changes to source code and coordinating work among team members (e.g., Git, Subversion).
common challenges faced by software engineers? Provide strategies to overcome these challenges.
    - Changing Requirements: Requirements may change during the development cycle, leading to scope creep and project delays.
    - Tight Deadlines: Pressure to deliver software products on schedule can result in rushed development and compromised quality.
    - Technical Debt: Accrued from shortcuts or suboptimal solutions, technical debt can impede future development efforts and increase maintenance costs.
     Strategies for overcoming challenges include effective communication, agile methodologies, prioritization of tasks, and regular reassessment of project goals and timeline
 different types of testing (unit, integration, system, and acceptance) and their importance in software quality assurance.
    -Unit Testing: Testing individual components or modules of software. Unit testing helps identify issues early in the development process and provides a solid foundation for the rest of the testing efforts.
    - Integration Testing: Testing interactions between different components or subsystems.it ensure that combined parts function correctly, focusing on interfaces and data flow between modules.
    - System Testing: Testing the entire software system as a whole. It involves testing the complete, integrated system to verify that it meets specified requirements and functions as expected.
    - Acceptance Testing: Testing the software against user requirements to ensure it meets user needs.. Acceptance testing helps validate the system's functionality, usability, and overall quality before it is released to the production environment.
#PART 2

Define prompt engineering and discuss its importance in interacting with AI models.
    Prompt engineering is the practice of designing inputs for AI tools that will produce optimal outputs
    IMPORTANCE
    - Effective prompt engineering allows users to generate more relevant and accurate responses from AI models, reducing the need for extensive revisions post-generation.
    - well-crafted prompts improve the interaction between users and AI systems, making it easier for users to obtain meaningful and contextually appropriate responses.
    - Prompt engineering can break down complex tasks into manageable subtasks, improving reliability and consistency in outputs. 
Provide an example of a vague prompt and then improve it by making it clear, specific, and concise. Explain why the improved prompt is more effective.
    Vague Prompt:
    "Tell me about climate change."
    Improved Prompt:
    "Can you provide a summary of the main causes of climate change and their impacts on global weather patterns?"
    why the improved prompt is more effective
    1. clarity
    2. specified
    3. conciseness
    4. targeted response